1) INSERTION SORT : 
LXI H, 2050H ; H-L points to start of array in memory
LXI D, 2050H ; D-E points to start of array in memory
MVI C, 0AH ; C stores number of elements of array(= number of outer loop iterations)

; Code in C++
; for(int i=0; i<n; i++) {
; int j = i-1, key = arr[i];
; while(j>=0 && arr[j] > key) {
; arr[j+1] = arr[j]; j--;  }
; arr[j+1] = key; }


; LOOP will increment address of array element after every iterations as comparison with next element has to be done

LOOP: INX H

; LOOP1 will control number of times loop is iterated(outer loop)

LOOP1: DCR C
JZ EXIT ; terminate outer loop when C(counter) = 0(forceful termination as JMP is used at last for continuing the outer LOOP)
INR E ; E is tracking relative position (current index), so you increase it after each outer pass.

; LOOP3 will check whether arr[i+1] > arr[i] and do the swapping(inner loop)

LOOP3: MOV A,M ; Start comparing the current element (arr[i+1]).
DCX H ; Compare current element with the previous one(arr[i]), so move pointer backward.
CMP M ; Check if the left element (arr[i] in M) is greater than the right element (arr[i+1] in A) -> if yes, SWAP needed(A < M -> carry is set)
JNC LOOP2 ; no swap

; Swap case :
CMC  ; Flip the Carry flag(to KEEP CARRY 0 so that CMP M in future can alter it if required)
MOV B,M ; Save the larger element(M) in B temporarily for swapping.
MOV M,A ; Place the smaller element into the left position (sorted order). (Remember that due to DCX H -> now H points to ith index)
INX H ; Move forward to right position (where swapping continues -> (i+1)th index))
MOV M,B ; arr[i+1] gets assigned to larger element(temporarily stored in B)
DCX H ; Now, M points to (i+1)th index but insertion sort aims at shifting the SMALLEST element to its correct position IN THE LEFT -> so, move 2 places back to (i-1)th index to compare it with ith index's element
DCX H
MOV A,M ; (A = arr[i-1])
INX H ; (M points to ith index)
CMP M ;(if A(arr[i-1]) < M(arr[i]) -> carry is set -> no swap needed)
JNC NEXT ; carry not set -> swap needed

; No swap in current iteration needed anymore -> ensure all essential registers are reset to correct values :
CMC

; Reload HL = DE.
; DE always stores the starting point (base address) + current offset (E).
; After doing internal swaps and shifts, you need to reset HL back to the right position to continue with sorting.
MOV H,D
MOV L,E
JMP LOOP ; jump back to outer loop's next iteration

NEXT: JMP LOOP3 ; jump back to the loop that is responsible for swapping

LOOP2: INX H ; Move to the next element(arr[i+1]) and move to the next iteration
JMP LOOP

EXIT: HLT

2) SELECTION SORT
; Selection Sort using MIN and SWAP subroutines(descending order)
; Code in C++
; for(int i=0; i<n-1; i++) {
; int minIndex = i;
; for(int j=i+1; j<n; j++) {
; if(arr[j] < arr[minIndex]) {
; minIndex = j;
;break; } }
;if(minIndex != i) swap(arr[i], arr[minIndex]); }



    LXI SP, 9000H      ; Initialize stack pointer - Stack is used for CALL and PUSH/POP instructions. A safe memory region for saving registers during subroutine calls.


    LXI H, 204FH       ; Point HL to the block (starting at 204FH )
    
    MOV C, M           ; Get block size into C

DO:
    INX H              ; Point to first element (2050H onwards)
    MOV A, M           ; Load current element into A(arr[i])
    CALL MIN           ; Call MIN to find minimum element address(minIndex)
    CMP M              ; Compare current element with minimum found(if(arr[i] == arr[minIndex]) -> it means arr[i] is the most minimum element and is in the correct position -> no swap needed)
    JZ GO              ; If same, no swap needed
    CALL SWAP          ; Else, swap the elements

; no swap
GO: 
    DCR C              ; Decrement count
    JNZ DO             ; Repeat until sorted
    HLT                ; Halt

MIN:
    PUSH H             ; Save HL - SAVE ALL THOSE REGISTERS IN STACK that can be changed by subroutine
    PUSH B             ; Save BC

    DCR C              ; Decrease counter (as current element is already considered)

LOOP:
    INX H              ; Next element(arr[i+1])
    CMP M              ; Compare A with next memory content(A(arr[i]) < M(arr[i+1]) -> carry is set ->  swap needed)
    JNC SKIP           ; If A > M, skip (only change from ascending order code) (carry not set -> skip)

; Swap code :
    MOV A, M           ; Else, update A (stores the target element(here, greater) -> A = arr[i+1])
    MOV D, H           ; Save address (H to D) (stores the target element's address in D-E pair)
    MOV E, L           ; Save address (L to E)

SKIP:
    DCR C              ; Decrement counter
    JNZ LOOP           ; Continue loop

; Restore saved content of stack
    POP B              ; Restore BC
    POP H              ; Restore HL
    RET                ; Return to main program

; --- Subroutine to Swap Current and Minimum Elements ---
SWAP:
    PUSH PSW           ; Save A and flags - SAVE ALL THOSE REGISTERS IN STACK that can be changed by subroutine
    PUSH B             ; Save BC

    LDAX D             ; Load from DE (target element address used to load target element)
    MOV B, A           ; Save content in B(store target element in B)
    MOV A, M           ; Load from HL(current element stored in A)
    STAX D             ; Store at DE(current element stored in target element's memory address -> one half of the swap complete)
    MOV M, B           ; Store B at HL(target element(stored in B) stored in current element's memory address(pointed by M))

; Restore saved content of stack
    POP B              ; Restore BC
    POP PSW            ; Restore PSW
    RET


ASCENDING ORDER SELECTION SORT:
; Selection Sort using MIN and SWAP subroutines(descending order)



    LXI SP, 9000H      ; Initialize stack pointer
    LXI H, 204FH       ; Point HL to the block (starting at 8000H)
    
    MOV C, M           ; Get block size into C (8000H holds count)

DO:
    INX H              ; Point to first element (8001H onwards)
    MOV A, M           ; Load current element into A(arr[i])
    CALL MIN           ; Call MIN to find minimum element address
    CMP M              ; Compare current element with minimum found
    JZ GO              ; If same, no swap needed
    CALL SWAP          ; Else, swap the elements

GO:
    DCR C              ; Decrement count
    JNZ DO             ; Repeat until sorted
    HLT                ; Halt

; --- Subroutine to Find Minimum Element ---
MIN:
    PUSH H             ; Save HL - SAVE ALL THOSE REGISTERS IN STACK that can be changed by subroutine
    PUSH B             ; Save BC

    DCR C              ; Decrease counter (as current element is already considered)

LOOP:
    INX H              ; Next element(arr[i+1])
    CMP M              ; Compare A with next memory content(A(arr[i]) < M(arr[i+1]) -> carry is set -> no swap needed)
    JC SKIP           ; If A < M, skip (only change from descending code)
    MOV A, M           ; Else, update A
    MOV D, H           ; Save address (H to D)
    MOV E, L           ; Save address (L to E)

SKIP:
    DCR C              ; Decrement counter
    JNZ LOOP           ; Continue loop

    POP B              ; Restore BC
    POP H              ; Restore HL
    RET                ; Return to main program

; --- Subroutine to Swap Current and Minimum Elements ---
SWAP:
    PUSH PSW           ; Save A and flags
    PUSH B             ; Save BC

    LDAX D             ; Load from DE
    MOV B, A           ; Save content in B
    MOV A, M           ; Load from HL
    STAX D             ; Store at DE
    MOV M, B           ; Store B at HL

    POP B              ; Restore BC
    POP PSW            ; Restore PSW
    RET

3) DIVISION : 
LXI H, 2050H ; Extract the dividend and store in B
MOV B,M
INX H  ;Extract the divisor and store in C
MOV C,M
MVI D, 00H
MOV A,B ; Store the dividend in A
LOOP: SUB C ; Continuously SUBTRACT the DIVISOR from the DIVIDEND until it becomes 0
INR D ; Increase the quotient on each iteration
CMP C ; Check if A(updated dividend) < divisor -> then carry is set -> it also means we need to terminate from the loop as our division process is complete(JNC LOOP breaks out as then carry is set)
JNC LOOP
STA 2053H ; Store remainder(if left)
MOV A,D
STA 2054H ; Store quotient
HLT

